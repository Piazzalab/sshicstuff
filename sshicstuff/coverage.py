import os
import logging
import numpy as np
import pandas as pd

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


#   Set as None to avoid SettingWithCopyWarning
pd.options.mode.chained_assignment = None


def coverage(
        sparse_mat_path: str,
        fragments_list_path: str,
        output_path: str = None,
        frag_id_shift: int = 0,
        normalize: bool = False,
        force: bool = False
) -> None:

    """
    Calculate the coverage per fragment and save the result to a bedgraph file in the output directory.

    Parameters
    ----------
    sparse_mat_path : str
        Path to the sparse_contacts_input.txt file (generated by hicstuff).
    fragments_list_path : str
        Path to the fragments_input.txt file (generated by hicstuff).
    output_path : str
        Path to the output directory.
    frag_id_shift : int
        Shift the fragment id by this value.
    normalize : bool
        Normalize the coverage by the total number of contacts.
    force : bool
        Force the overwriting of the output file if the file exists.

    Returns
    -------
    None
    """

    logging.info("Calculating coverage per fragment into a bedgraph.")

    if output_path is None:
        output_path = sparse_mat_path.replace(".txt", "_coverage.bedgraph")

    else:
        out_basedir = os.path.dirname(output_path)
        if not os.path.exists(out_basedir):
            os.makedirs(out_basedir)

    if os.path.exists(output_path) and not force:
        logging.warning(f"Output file already exists: {output_path}")
        logging.warning("Use the --force / -F flag to overwrite the existing file.")
        return

    df_fragments: pd.DataFrame = pd.read_csv(fragments_list_path, sep='\t')
    df_fragments.rename(columns={'chrom': 'chr', 'start_pos': 'start', 'end_pos': 'end'}, inplace=True)
    df_fragments['id'] = list(range(len(df_fragments)))
    df_fragments["id"] = df_fragments["id"] + frag_id_shift

    df_hic_contacts: pd.DataFrame = pd.read_csv(
        sparse_mat_path, header=0, sep="\t", names=['frag_a', 'frag_b', 'contacts'])

    df_coverage: pd.DataFrame = df_fragments[['chr', 'start', 'end']]
    df_coverage['contacts'] = np.nan

    df_merged_a: pd.DataFrame = df_hic_contacts.merge(
        df_fragments[['id', 'chr', 'start', 'end']],
        left_on='frag_a',
        right_on='id',
        suffixes=('', '_a')).drop(columns=['frag_a', 'frag_b'])

    df_merged_b: pd.DataFrame = df_hic_contacts.merge(
        df_fragments[['id', 'chr', 'start', 'end']],
        left_on='frag_b',
        right_on='id',
        suffixes=('', '_b')).drop(columns=['frag_a', 'frag_b'])

    df_grouped_a: pd.DataFrame = df_merged_a.groupby(by=['id', 'chr', 'start', 'end'], as_index=False).sum()
    df_grouped_b: pd.DataFrame = df_merged_b.groupby(by=['id', 'chr', 'start', 'end'], as_index=False).sum()

    df_contacts_cov: pd.DataFrame = pd.concat(
        (df_grouped_a, df_grouped_b)).groupby(by=['id', 'chr', 'start', 'end'], as_index=False).sum()

    df_contacts_cov.index = df_contacts_cov.id
    df_contacts_cov.drop(columns=['id'], inplace=True)

    if normalize:
        logging.info("Normalizing coverage by the total number of contacts.")
        df_frequencies_cov: pd.DataFrame = df_contacts_cov.copy(deep=True)
        df_frequencies_cov["contacts"] /= sum(df_frequencies_cov["contacts"])
        df_frequencies_cov.rename(columns={"contacts": "frequencies"})
        df_frequencies_cov.to_csv(output_path, sep='\t', index=False, header=False)

    else:
        df_contacts_cov.to_csv(output_path, sep='\t', index=False, header=False)
        logging.info(f"Coverage file saved to {output_path}")

    logging.info("Coverage calculation completed.")

    """
    Example of usage:
    
    python3 ./main.py coverage \
    ../data/samples/AD241_S288c_DSB_LY_Capture_artificial_cutsite_q30_PCRfree.txt \
    ../data/inputs/fragments_list_S288c_DSB_LY_Capture_artificial_DpnIIHinfI.txt \
     -s 0 -F -N
    """