from docopt import docopt

import sshicstuff.subsample as sshcsb
import sshicstuff.genomaker as sshcg
import sshicstuff.filter as sshcf
import sshicstuff.associate as sshca
import sshicstuff.coverage as sshcc
import sshicstuff.rebin as sshcr
import sshicstuff.statistics as sshcst
import sshicstuff.aggregate as sshcag


class AbstractCommand:
    """Base class for the commands"""

    def __init__(self, command_args, global_args):
        """
        Initialize the commands.

        :param command_args: arguments of the command
        :param global_args: arguments of the program
        """
        self.args = docopt(self.__doc__, argv=command_args)
        self.global_args = global_args

    def execute(self):
        """Execute the commands"""
        raise NotImplementedError


class Subsample(AbstractCommand):
    """
    Subsample and compress FASTQ file using seqtk.

    usage:
        subsample [-s SEED] [-z SIZE] [-c] [-F] <input>

    arguments:
        <input>                   Input FASTQ or FASTQ.gz file

    options:
        -s SEED, --seed SEED      Seed for the random number generator [default: 100]
        -z SIZE, --size SIZE      Number of reads to subsample [default: 4000000]
        -c, --compress            Compress the output file with gzip [default: True]
        -F, --force               Force the overwriting of the output file if the file exists [default: False]
    """
    def execute(self):
        sshcsb.subsample(
            self.args["<input>"],
            seed=int(self.args["--seed"]),
            size=int(self.args["--size"]),
            compress=self.args["--compress"]

        )


class Genomaker(AbstractCommand):
    """
    Create a chromosome artificial that is the concatenation of the annealing oligos and the enzyme sequence.
    You can specify the rules for the concatenation.

    usage:
        genomaker [-f FRAGMENT_SIZE] [-s SPACER] [-l LINE_LENGTH] [-a ADDITIONAL] <annealing_input> <genome_input> <enzyme>

    arguments:
        <annealing_input>         Path to the annealing oligo positions CSV file
        <genome_input>            Path to the genome FASTA file
        <enzyme>                  Sequence of the enzyme

    options:
        -f FRAGMENT_SIZE, --fragment-size FRAGMENT_SIZE     Size of the fragments [default: 150]
        -s SPACER, --spacer SPACER                          Spacer sequence [default: N]
        -l LINE_LENGTH, --line-length LINE_LENGTH           Length of the lines in the FASTA file [default: 80]
        -a ADDITIONAL, --additional ADDITIONAL              Additional FASTA files to concatenate [default: None]
    """

    def execute(self):
        sshcg.insert_artifical_chr(
            self.args["<annealing_input>"],
            self.args["<genome_input>"],
            self.args["<enzyme>"],
            fragment_size=int(self.args["--fragment-size"]),
            fasta_spacer=self.args["--spacer"],
            fasta_line_length=int(self.args["--line-length"]),
            additional_fasta_path=self.args["--additional"]
        )


class Associate(AbstractCommand):
    """
    Simple and basic script to find and associate for each oligo/probe name
    a fragment id from the fragment list generated by hicstuff.

    usage:
        associate <oligos_capture_input> <fragments_input> [-s SHIFT] [-F]

    Arguments:
        <oligos_capture_input>              Path to the oligos capture file
        <fragments_input>                   Path to the fragments file

    Options:
        -s SHIFT, --shift SHIFT             Shift the fragment id by this value [default: 0]
        -F, --force                         Force the overwriting of the oligos file even if
                                            the columns are already present [default: True]
    """

    def execute(self):
        sshca.associate_oligo_to_frag(
            oligos_capture_path=self.args["<oligos_capture_input>"],
            fragments_path=self.args["<fragments_input>"],
            frag_id_shift=int(self.args["--shift"]),
            force=self.args["--force"]
        )


class Hiconly(AbstractCommand):
    """
    Filter the sparse matrix by removing all the ss DNA specific contacts.
    Retain only the contacts between non-ss DNA fragments.

    usage:
        hiconly <sparse_matrix_input> <oligos_capture_input> [-o OUTPUT] [-n FLANKING-NUMBER]

    Arguments:
        <sparse_matrix_input>                           Path to the sparse matrix file
        <oligos_capture_input>                          Path to the oligos capture file

    Options:
        -o OUTPUT, --output OUTPUT                      Path to the output file
        -n FLANKING-NUMBER, --flanking-number NUMBER    number of flanking fragment around the fragment containing the
                                                        oligo to consider and remove
        -F, --force                                     Force the overwriting of the oligos file
                                                        if the file exists [default: False]
    """
    def execute(self):
        sshcf.onlyhic(
            sample_sparse_mat=self.args["<sparse_matrix_input>"],
            oligos_capture_path=self.args["<oligos_capture_input>"],
            output_path=self.args["--output"],
            n_flanking_fragment=int(self.args["--flanking"])
        )


class Filter(AbstractCommand):
    """
    Filter reads from a sparse matrix and keep only pairs of reads that contain at least one oligo/probe.

    usage:
        filter <sparse_matrix_input> <oligos_capture_input> <fragments_list_input> [-o OUTPUT] [-s SHIFT] [-F]

    Arguments:
        <sparse_matrix_input>                           Path to the sparse matrix file (hicstuff output .txt)
        <oligos_capture_input>                          Path to the oligos capture file (table .csv or .tsv
                                                        for oligos capture information)
        <fragments_list_input>                          Path to the digested fragments list file (hicstuff .txt)

    Options:
        -o OUTPUT, --output OUTPUT                      Path to the output file
        -s SHIFT, --shift SHIFT                         Shift the fragment id by this value [default: 0]
        -F, --force                                     Force the overwriting of the oligos file
                                                        if the file exists [default: False]

    """

    def execute(self):
        sshcf.filter_contacts(
            sparse_mat_path=self.args["<sparse_matrix_input>"],
            oligos_capture_path=self.args["<oligos_capture_input>"],
            fragments_list_path=self.args["<fragments_list_input>"],
            output_path=self.args["--output"],
            frag_id_shift=int(self.args["--shift"]),
            force=self.args["--force"]
        )


class Coverage(AbstractCommand):
    """
    Calculate the coverage per fragment and save the result to a bedgraph.

    usage:
        coverage <sparse_mat_path> <fragments_list_path> [-o OUTPUT] [-s SHIFT] [-F] [-N]

    Arguments:
        <sparse_mat_path>                           Path to the sparse_contacts_input.txt file (generated by hicstuff)
        <fragments_list_path>                       Path to the fragments_input.txt file (generated by hicstuff)

    Options:
        -o OUTPUT, --output OUTPUT                  Desired output file path
        -s SHIFT, --shift SHIFT                     Shift the fragment id by this value
        -F, --force                                 Force the overwriting of the output file
                                                    if the file exists [default: False]
        -N, --normalize                             Normalize the coverage by the total
                                                    number of contacts [default: False]

    """

    def execute(self):
        sshcc.coverage(
            sparse_mat_path=self.args["<sparse_mat_path>"],
            fragments_list_path=self.args["<fragments_list_path>"],
            output_path=self.args["--output"],
            frag_id_shift=int(self.args["--shift"]),
            normalize=self.args["--normalize"],
            force=self.args["--force"]
        )


class Profile(AbstractCommand):
    """
    Generate oligo 4-C profiles.
    Also called un-binned table, or 0 kn resolution tables

    usage:
        profile <filtered_table_input> <oligos_capture_input> <chr_coord_input> [-o OUTPUT] [-a ADD] [-F] [-N]

    Arguments:
        <filtered_table_input>                      Path to the filtered table file
        <oligos_capture_input>                      Path to the oligos capture file
        <chr_coord_input>                           Path to the chromosome coordinates file

    Options:
        -o OUTPUT, --output OUTPUT                  Desired output file path
        -a ADD, --additional ADD                    Additional columns to keep in the output file, like
                                                    groupes of probes to sum, average for instance
        -F, --force                                 Force the overwriting of the output file
                                                    if the file exists [default: False]
        -N, --normalize                             Normalize the coverage by the total
                                                    number of contacts [default: False]
    """

    def execute(self):
        sshcr.profile_contacts(
            filtered_table_path=self.args["<filtered_table_input>"],
            oligos_capture_path=self.args["<oligos_capture_input>"],
            chromosomes_coord_path=self.args["<chr_coord_input>"],
            output_path=self.args["--output"],
            additional_groups_path=self.args["--additional"],
            normalize=self.args["--normalize"],
            force=self.args["--force"]
        )


class Rebin(AbstractCommand):

    """
    Rebin change binning resolution of a 4C-like profile

    usage:
        rebin <profile_input>  <chr_coord_input> [-o OUTPUT] [-b RESOLUTION] [-F]

    Arguments:
        <profile_input>                             Path to the profile file
        <chr_coord_input>                           Path to the chromosome coordinates file

    Options:
        -o OUTPUT, --output OUTPUT                  Desired output file path
        -b BINSIZE, --binsize BINSIZE               New resolution to rebin the profile [default: 1000]
        -F, --force                                 Force the overwriting of the output file
                                                    if the file exists [default: False]
    """

    def execute(self):
        sshcr.rebin_profile(
            contacts_unbinned_path=self.args["<profile_input>"],
            chromosomes_coord_path=self.args["<chr_coord_input>"],
            bin_size=int(self.args["--binsize"]),
            output_path=self.args["--output"],
            force=self.args["--force"]
        )


class Stats(AbstractCommand):
    """
    Generate statistics about the contacts made by each probe. Additionally, it generates
    the normalized contacts for each probe on each chromosome and on each chromosome except its own.

    It generates 3 outcomes files (.tsv):
    - contacts_statistics.tsv: contains different kinds of statistics for each probe.
    - norm_chr_freq.tsv: contains the normalized contacts for each probe on each chromosome.
    - norm_inter_chr_freq.tsv: contains the normalized contacts for each probe on each chromosome except its own.

    usage:
        stats <contacts_unbinned_path> <sparse_mat_path> <chr_coord_path> <oligos_path> [-o OUTPUT] [-c CIS_RANGE] [-F]

    Arguments:
        <contacts_unbinned_path>                    Path to the unbinned_contacts.tsv file (generated by fragments)
        <sparse_mat_path>                           Path to the sparse_contacts_input.txt file (generated by hicstuff)
        <chr_coord_path>                            Path to the input chr_centros_coordinates.tsv file
        <oligos_path>                               Path to the oligos input CSV file

    Options:
        -o OUTPUT, --output OUTPUT                  Desired output directory
        -c CIS_RANGE, --cis-range CIS_RANGE         Cis range to be considered around the probe [default: 50000]
        -F, --force                                 Force the overwriting of the output file
                                                    if the file exists [default: False]
    """

    def execute(self):
        sshcst.get_stats(
            contacts_unbinned_path=self.args["<contacts_unbinned_path>"],
            sparse_mat_path=self.args["<sparse_mat_path>"],
            chr_coord_path=self.args["<chr_coord_path>"],
            oligos_path=self.args["<oligos_path>"],
            output_dir=self.args["--output"],
            cis_range=int(self.args["--cis-range"]),
            force=self.args["--force"]
        )


class Aggregate(AbstractCommand):
    """
    Aggregate contacts around specific regions of centromeres or telomeres.

    usage:
        aggregate <contacts_binned_path> <chr_coord_path> <oligos_path> [-w WINDOW] [-o OUTPUT] [-E CHRS...] [-I] [-N] [-C] [-T] [-r]

    Arguments:
        <contacts_binned_path>                      Path to the binned_contacts.tsv file (generated by fragments)
                                                    binning of your choice
        <chr_coord_path>                            Path to the chromosome coordinates file
        <oligos_path>                               Path to the oligos input CSV file

    Options:
        -w WINDOW, --window WINDOW                  Window size around the centromere or telomere to aggregate contacts
                                                    [default: 150000]
        -o OUTPUT, --output OUTPUT                  Desired output directory
        -E CHRS, --exclude=CHRS                     Exclude the chromosome(s) from the analysis
        -I, --inter                                 Only keep inter-chr contacts, i.e., removing contacts between
                                                    a probe and it emplacement chr [default: True]
        -N, --normalize                             Normalize the contacts by the total number of contacts
                                                    [default: False]
        -C, --cen                                   Aggregate only centromeric regions [default: False]
        -T, --tel                                   Aggregate only telomeric regions [default: False]
        -r, --arm-length                            Classify telomeres aggregated in according to their arm length.
    """

    def execute(self):

        sshcag.aggregate(
            binned_contacts_path=self.args["<contacts_binned_path>"],
            chr_coord_path=self.args["<chr_coord_path>"],
            oligos_capture_path=self.args["<oligos_path>"],
            window_size=int(self.args["--window"]),
            telomeres=self.args["--tel"],
            centromeres=self.args["--cen"],
            output_dir=self.args["--output"],
            excluded_chr_list=self.args["--exclude"],
            inter_only=self.args["--inter"],
            normalize=self.args["--normalize"],
            arm_length_classification=self.args["--arm-length"]
        )


class Compare(AbstractCommand):
    pass


class Pipeline(AbstractCommand):
    pass


class Gui(AbstractCommand):
    pass





