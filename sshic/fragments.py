#! /usr/bin/env python3
import re
import os
import sys
import argparse
import numpy as np
import pandas as pd
from typing import Optional
from utils import frag2, sort_by_chr

#   Set as None to avoid SettingWithCopyWarning
pd.options.mode.chained_assignment = None


def organize_contacts(
        filtered_contacts_path: str,
        oligos_path: str,
        chromosomes_coord_path: str,
        additional_path: Optional[str] = None
):

    """
    Organize the contacts made by each probe with the genome and save the results as two .tsv files:
    one for contacts and one for frequencies.

    Parameters
    ----------
    filtered_contacts_path : str
        Path to the contacts_filtered_input.txt file (generated by filter).
    oligos_path : str
        Path to the oligos input CSV file.
    chromosomes_coord_path : str
        Path to the input chr_centromeres_coordinates.tsv file.
    additional_path: Optional[str]
        Path to a csv file that contains groups of probes to sum, average etc ...
    """

    sample_filename = filtered_contacts_path.split("/")[-1]
    sample_id = re.search(r"AD\d+", sample_filename).group()
    output_dir = os.path.dirname(filtered_contacts_path)
    output_path = os.path.join(output_dir, sample_id)

    df_chr_len: pd.DataFrame = pd.read_csv(chromosomes_coord_path, sep='\t', index_col=None)
    df_chr_len = df_chr_len[["chr", "length"]]
    df_chr_len["length"] = df_chr_len["length"].shift().fillna(0).astype("int64")
    df_chr_len["cumsum"] = df_chr_len["length"].cumsum()

    df_probes: pd.DataFrame = pd.read_csv(oligos_path, sep=',')
    probes = df_probes['name'].to_list()
    fragments = df_probes['fragment'].astype(str).to_list()
    df: pd.DataFrame = pd.read_csv(filtered_contacts_path, sep='\t')
    df_contacts: pd.DataFrame = pd.DataFrame(columns=['chr', 'start', 'sizes'])
    df_contacts: pd.DataFrame = df_contacts.astype(dtype={'chr': str, 'start': int, 'sizes': int})

    for x in ['a', 'b']:
        y = frag2(x)
        df2 = df[~pd.isna(df['name_' + x])]

        for probe in probes:
            if probe not in pd.unique(df2['name_'+x]):
                tmp = pd.DataFrame({
                    'chr': [np.nan],
                    'start': [np.nan],
                    'sizes': [np.nan],
                    probe: [np.nan]})

            else:
                df3 = df2[df2['name_'+x] == probe]
                tmp = pd.DataFrame({
                    'chr': df3['chr_'+y],
                    'start': df3['start_'+y],
                    'sizes': df3['size_'+y],
                    probe: df3['contacts']})

            df_contacts = pd.concat([df_contacts, tmp])

    group = df_contacts.groupby(by=['chr', 'start', 'sizes'], as_index=False)
    df_contacts: pd.DataFrame = group.sum()
    df_contacts = sort_by_chr(df_contacts, 'chr', 'start')
    df_contacts.index = range(len(df_contacts))

    for probe, frag in zip(probes, fragments):
        df_contacts.rename(columns={probe: frag}, inplace=True)

    df_contacts: pd.DataFrame = df_contacts.loc[:, ~df_contacts.columns.duplicated()]

    df_merged: pd.DataFrame = df_contacts.merge(df_chr_len, on="chr")
    df_merged["genome_start"] = df_merged["cumsum"] + df_merged["start"]
    df_contacts.insert(3, "genome_start", df_merged["genome_start"])
    del df_merged

    df_frequencies = df_contacts.copy(deep=True)
    for frag in fragments:
        df_frequencies[frag] /= sum(df_frequencies[frag])
    #   Write into .tsv file contacts as there are and in the form of frequencies :
    df_contacts.to_csv(output_path + '_unbinned_contacts.tsv', sep='\t', index=False)
    df_frequencies.to_csv(output_path + '_unbinned_frequencies.tsv', sep='\t', index=False)

    if additional_path is not None:
        df_additional: pd.DataFrame = pd.read_csv(additional_path, sep='\t')
        df_contacts_groups: pd.DataFrame = df_contacts[['chr', 'start', 'sizes']]
        for index, row in df_additional.iterrows():
            group_probes = row["probes"].split(",")
            group_name = row["name"]
            if row["action"] == "average":
                df_contacts_groups[group_name] = df_contacts[group_probes].mean(axis=1)
            elif row["action"] == "sum":
                df_contacts_groups[group_name] = df_contacts[group_probes].sum(axis=1)
            else:
                continue

        df_frequencies_groups = df_contacts_groups.copy(deep=True)
        for group in df_additional["name"].values:
            df_frequencies_groups[group] /= df_frequencies_groups[group].sum(axis=0)

        df_contacts_groups.to_csv(output_path + '_unbinned_contacts_groups.tsv', sep='\t', index=False)
        df_frequencies_groups.to_csv(output_path + '_unbinned_frequencies_groups.tsv', sep='\t', index=False)


def main(argv):
    """
    Main function to parse command-line arguments and execute the organize_contacts function.

    Parameters
    ----------
    argv : List[str]
        List of command-line arguments.
    """

    # Example :
    """
    -c ../test_data/AD162_classic/AD162/AD162_filtered.tsv 
    -p ../test_data/AD162_classic/probes_to_fragments.tsv 
    -a ../test_data/AD162_classic/additional_categories.tsv
    """

    if not argv:
        print('Please enter arguments correctly')
        exit(0)

    parser = argparse.ArgumentParser(description='Contacts made by each probe with the genome (unbinned)')
    parser.add_argument('-c', '--contacts', type=str, required=True,
                        help='Path to the contacts_filtered_input.txt file (generated by filter)')
    parser.add_argument('-o', '--oligos', type=str, required=True,
                        help='Path to the oligos_input.csv file')
    parser.add_argument('-c', '--centromeres', type=str, required=True,
                        help='Path to the chr_centromeres_coordinates.tsv file')
    parser.add_argument('-a', '--additional', type=str, required=False,
                        help='Path to additional groups of probes table')

    args = parser.parse_args(argv)
    organize_contacts(args.contacts, args.oligos, args.centromeres)


if __name__ == "__main__":
    main(sys.argv[1:])
