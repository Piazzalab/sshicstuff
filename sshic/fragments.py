#! /usr/bin/env python3
import re
import os
import sys
import getopt
import numpy as np
import pandas as pd
from utils import frag2, sort_by_chr

#   Set as None to avoid SettingWithCopyWarning
pd.options.mode.chained_assignment = None


def organize_contacts(filtered_contacts_path: str):

    """
    This function aims to organise the contacts made by each probe with the genome.
    It gives as a result a .tsv file written dataframe with on the columns the different probes
    and on the rows  the chromosomes positions contacted by the probes.

    This step may also appear annotated as the '0kb binning' as we do the same work as a re-binning function,
    but with no defined bin size.

    ARGUMENTS
    _________________
    filtered_contacts_path: str, path to the filtered contacts table of
        the current sample, made previously with the filter script
    """

    sample_id = re.search(r"AD\d+", filtered_contacts_path).group()
    sample_dir = os.path.dirname(filtered_contacts_path)
    data_dir = os.path.dirname(sample_dir)
    output_path = os.path.join(sample_dir, sample_id)

    probes_to_fragments_path: str = os.path.join(data_dir, "probes_to_fragments.tsv")
    if not os.path.exists(probes_to_fragments_path):
        from probe2fragment import associate_probes_to_fragments
        associate_probes_to_fragments(
            fragments_list_path=os.path.join(data_dir, "fragments_list.txt"),
            oligos_capture_path=os.path.join(data_dir, "capture_oligo_positions.csv")
        )

    df_probes: pd.DataFrame = pd.read_csv(probes_to_fragments_path, sep='\t', index_col=0)

    fragments = pd.unique(df_probes['frag_id'].astype(str))
    df = pd.read_csv(filtered_contacts_path, sep='\t')
    df_contacts = pd.DataFrame(columns=['chr', 'start', 'sizes'])
    df_contacts = df_contacts.astype(dtype={'chr': str, 'start': int, 'sizes': int})

    for x in ['a', 'b']:
        y = frag2(x)
        df2 = df[~pd.isna(df['name_' + x])]

        for frag in fragments:
            frag_int = int(frag)
            if frag_int not in pd.unique(df2['frag_'+x]):
                tmp = pd.DataFrame({
                    'chr': [np.nan],
                    'start': [np.nan],
                    'sizes': [np.nan],
                    frag: [np.nan]})

            else:
                df3 = df2[df2['frag_'+x] == frag_int]
                tmp = pd.DataFrame({
                    'chr': df3['chr_'+y],
                    'start': df3['start_'+y],
                    'sizes': df3['size_'+y],
                    frag: df3['contacts']})

            df_contacts = pd.concat([df_contacts, tmp])

    group = df_contacts.groupby(by=['chr', 'start', 'sizes'], as_index=False)
    df_res_contacts = group.sum()
    df_res_contacts = sort_by_chr(df_res_contacts, 'chr', 'start')
    df_res_contacts.index = range(len(df_res_contacts))

    df_res_frequencies = df_res_contacts.copy(deep=True)
    for frag in fragments:
        df_res_frequencies[frag] /= sum(df_res_frequencies[frag])

    #   Write into .tsv file contacts as there are and in the form of frequencies :
    df_res_contacts.to_csv(output_path + '_unbinned_contacts.tsv', sep='\t', index=False)
    df_res_frequencies.to_csv(output_path + '_unbinned_frequencies.tsv', sep='\t', index=False)


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    if not argv:
        print('Please enter arguments correctly')
        exit(0)

    try:
        opts, args = getopt.getopt(argv, "hc:", ["--help", "--contacts"])

    except getopt.GetoptError:
        print(
            'Contacts made by each probes with the genome (unbinned) :\n'
            '-c <contacts_filtered_input.txt> (generated by filter) \n')
        sys.exit(2)

    filtered_contacts_input = ""
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print(
                'Contacts made by each probes with the genome (unbinned) :\n'
                '-c <contacts_filtered_input.txt> (generated by filter) \n')

            sys.exit()
        elif opt in ("-c", "--fragments"):
            filtered_contacts_input = arg

    organize_contacts(filtered_contacts_input)


if __name__ == "__main__":
    main(sys.argv[1:])
