#! /usr/bin/env python3
import re
import os
import numpy as np
import pandas as pd
from typing import Optional
from utils import frag2, sort_by_chr, make_groups_of_probes

#   Set as None to avoid SettingWithCopyWarning
pd.options.mode.chained_assignment = None


def organize_contacts(
        filtered_contacts_path: str,
        oligos_path: str,
        chromosomes_coord_path: str,
        output_dir: str,
        additional_path: Optional[str] = None
):

    """
    Organize the contacts made by each probe with the genome and save the results as two .tsv files:
    one for contacts and one for frequencies.

    Parameters
    ----------
    filtered_contacts_path : str
        Path to the contacts_filtered_input.txt file (generated by filter).
    oligos_path : str
        Path to the oligos input CSV file.
    chromosomes_coord_path : str
        Path to the input chr_centromeres_coordinates.tsv file.
    output_dir : str
        Path to the output directory.
    additional_path: str
        Path to a csv file that contains groups of probes to sum, average etc ...
    """

    sample_filename = filtered_contacts_path.split("/")[-1]
    sample_id = re.search(r"AD\d+", sample_filename).group()
    output_path = os.path.join(output_dir, sample_id)

    df_chr_len: pd.DataFrame = pd.read_csv(chromosomes_coord_path, sep='\t', index_col=None)
    df_chr_len = df_chr_len[["chr", "length"]]
    df_chr_len["length"] = df_chr_len["length"].shift().fillna(0).astype("int64")
    df_chr_len["cumsum"] = df_chr_len["length"].cumsum()

    df_probes: pd.DataFrame = pd.read_csv(oligos_path, sep=',')
    probes = df_probes['name'].to_list()
    fragments = df_probes['fragment'].astype(str).to_list()
    df: pd.DataFrame = pd.read_csv(filtered_contacts_path, sep='\t')
    df_contacts: pd.DataFrame = pd.DataFrame(columns=['chr', 'start', 'sizes'])
    df_contacts: pd.DataFrame = df_contacts.astype(dtype={'chr': str, 'start': int, 'sizes': int})

    for x in ['a', 'b']:
        y = frag2(x)
        df2 = df[~pd.isna(df['name_' + x])]

        for probe in probes:
            if probe not in pd.unique(df2['name_'+x]):
                tmp = pd.DataFrame({
                    'chr': [np.nan],
                    'start': [np.nan],
                    'sizes': [np.nan],
                    probe: [np.nan]})

            else:
                df3 = df2[df2['name_'+x] == probe]
                tmp = pd.DataFrame({
                    'chr': df3['chr_'+y],
                    'start': df3['start_'+y],
                    'sizes': df3['size_'+y],
                    probe: df3['contacts']})

            df_contacts = pd.concat([df_contacts, tmp])

    group = df_contacts.groupby(by=['chr', 'start', 'sizes'], as_index=False)
    df_contacts: pd.DataFrame = group.sum()
    df_contacts = sort_by_chr(df_contacts, 'chr', 'start')
    df_contacts.index = range(len(df_contacts))

    for probe, frag in zip(probes, fragments):
        df_contacts.rename(columns={probe: frag}, inplace=True)

    df_contacts: pd.DataFrame = df_contacts.loc[:, ~df_contacts.columns.duplicated()]

    df_merged: pd.DataFrame = df_contacts.merge(df_chr_len, on="chr")
    df_merged["genome_start"] = df_merged["cumsum"] + df_merged["start"]
    df_contacts.insert(3, "genome_start", df_merged["genome_start"])
    del df_merged

    df_frequencies = df_contacts.copy(deep=True)
    for frag in fragments:
        df_frequencies[frag] /= sum(df_frequencies[frag])

    if additional_path:
        df_additional: pd.DataFrame = pd.read_csv(additional_path, sep='\t')
        probes_to_fragments = dict(zip(probes, fragments))
        make_groups_of_probes(df_additional, df_contacts, probes_to_fragments)
        make_groups_of_probes(df_additional, df_frequencies, probes_to_fragments)

    #   Write into .tsv file contacts as there are and in the form of frequencies :
    df_contacts.to_csv(output_path + '_unbinned_contacts.tsv', sep='\t', index=False)
    df_frequencies.to_csv(output_path + '_unbinned_frequencies.tsv', sep='\t', index=False)

