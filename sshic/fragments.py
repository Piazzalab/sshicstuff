#! /usr/bin/env python3
import re
import os
import sys
import argparse
import numpy as np
import pandas as pd
from typing import Optional
from utils import frag2, sort_by_chr

#   Set as None to avoid SettingWithCopyWarning
pd.options.mode.chained_assignment = None


def organize_contacts(
        filtered_contacts_path: str,
        probes_to_fragments_path: str,
        additional_path: Optional[str] = None
):

    """
    Organize the contacts made by each probe with the genome and save the results as two .tsv files:
    one for contacts and one for frequencies.

    Parameters
    ----------
    filtered_contacts_path : str
        Path to the contacts_filtered_input.txt file (generated by filter).
    probes_to_fragments_path : str
        Path to the probes to fragments corresponding table.
    additional_path: str
        Path to a csv file that contains groups of probes to sum, average etc ...
    """

    sample_filename = filtered_contacts_path.split("/")[-1]
    sample_id = re.search(r"AD\d+", sample_filename).group()
    output_dir = os.path.dirname(filtered_contacts_path)
    output_path = os.path.join(output_dir, sample_id)

    df_probes: pd.DataFrame = pd.read_csv(probes_to_fragments_path, sep='\t', index_col=0)
    fragments = pd.unique(df_probes['frag_id'].astype(str))
    df: pd.DataFrame = pd.read_csv(filtered_contacts_path, sep='\t')
    df_contacts: pd.DataFrame = pd.DataFrame(columns=['chr', 'start', 'sizes'])
    df_contacts: pd.DataFrame = df_contacts.astype(dtype={'chr': str, 'start': int, 'sizes': int})

    for x in ['a', 'b']:
        y = frag2(x)
        df2 = df[~pd.isna(df['name_' + x])]

        for frag in fragments:
            frag_int = int(frag)
            if frag_int not in pd.unique(df2['frag_'+x]):
                tmp = pd.DataFrame({
                    'chr': [np.nan],
                    'start': [np.nan],
                    'sizes': [np.nan],
                    frag: [np.nan]})

            else:
                df3 = df2[df2['frag_'+x] == frag_int]
                tmp = pd.DataFrame({
                    'chr': df3['chr_'+y],
                    'start': df3['start_'+y],
                    'sizes': df3['size_'+y],
                    frag: df3['contacts']})

            df_contacts = pd.concat([df_contacts, tmp])

    group = df_contacts.groupby(by=['chr', 'start', 'sizes'], as_index=False)
    df_res_contacts = group.sum()
    df_res_contacts = sort_by_chr(df_res_contacts, 'chr', 'start')
    df_res_contacts.index = range(len(df_res_contacts))

    df_res_frequencies = df_res_contacts.copy(deep=True)
    for frag in fragments:
        df_res_frequencies[frag] /= sum(df_res_frequencies[frag])

    #   Write into .tsv file contacts as there are and in the form of frequencies :
    df_res_contacts.to_csv(output_path + '_unbinned_contacts.tsv', sep='\t', index=False)
    df_res_frequencies.to_csv(output_path + '_unbinned_frequencies.tsv', sep='\t', index=False)

    if additional_path is not None:
        df_additional: pd.DataFrame = pd.read_csv(additional_path, sep='\t')
        if "average" in df_additional["action"].values:
            additional_average: dict = {}
            for index, row in df_additional.loc[df_additional["action"] == "average"].iterrows():
                additional_average[row["category"]] = row["probe"].split(",")

            for group, probes in additional_average.items():
                pass

        if "sum" in df_additional["action"].values:
            additional_sum: dict = {}
            for index, row in df_additional.loc[df_additional["action"] == "sum"].iterrows():
                additional_sum[row["category"]] = row["probe"].split(",")



        pass


def main(argv):
    """
    Main function to parse command-line arguments and execute the organize_contacts function.

    Parameters
    ----------
    argv : List[str]
        List of command-line arguments.
    """

    # Example :
    """
    -c ../test_data/AD162_classic/AD162/AD162_filtered.tsv 
    -p ../test_data/AD162_classic/probes_to_fragments.tsv 
    -a ../test_data/AD162_classic/additional_categories.tsv
    """

    if not argv:
        print('Please enter arguments correctly')
        exit(0)

    parser = argparse.ArgumentParser(description='Contacts made by each probe with the genome (unbinned)')
    parser.add_argument('-c', '--contacts', type=str, required=True,
                        help='Path to the contacts_filtered_input.txt file (generated by filter)')
    parser.add_argument('-p', '--p2f', type=str, required=True,
                        help='Path to the probes to fragments corresponding table')
    parser.add_argument('-a', '--additional', type=str, required=True,
                        help='Path to additional groups of probes table')

    args = parser.parse_args(argv)
    organize_contacts(args.contacts, args.p2f, args.additional)


if __name__ == "__main__":
    main(sys.argv[1:])
