import os
import sys
import argparse
import pandas as pd
from utils import find_nearest


def associate_probes_to_fragments(
    fragments_list_path: str,
    oligos_capture_path: str
):
    """
    Associate probes (oligo captures) with corresponding fragments (reads containing the probes).

    This function formats and creates a correspondence between each probe (oligo capture) and
    the fragment (read) that contains it. Additional information is provided, such as the chromosome of the probe
    (essentially the same as the fragment), the position of the fragment and the probe on the chromosome, and the type
    (ss, ds, ds_neg, etc.) of the probe.

    The resulting DataFrame is written to a TSV file in the same location as the fragments_list.txt.

    Parameters
    ----------
    fragments_list_path : str
        Path to the digested fragments list based on a restriction enzyme or a fixed chunk size.
    oligos_capture_path : str
        Path to the file containing the oligo-nucleotides capture information.

    Returns
    -------
    None
    """

    dirname = os.path.dirname(fragments_list_path)
    output_path = os.path.join(dirname, "probes_to_fragments.tsv")

    df_fragments = pd.read_csv(fragments_list_path, sep='\t')
    df_oligos = pd.read_csv(oligos_capture_path, sep=",")
    df_probes_in_frag = pd.DataFrame()
    df_probes_in_frag.index = \
        ['type', 'probe_start', 'probe_end', 'chr', 'frag_id', 'frag_start', 'frag_end']

    for index, row in df_oligos.iterrows():
        chrom = row["chr"]
        probe_start = row["start"]
        probe_end = row["end"]
        probe_type = row["type"]
        probe = row["name"]
        sub_df_fragments = df_fragments[df_fragments['chrom'] == chrom]
        oligo_middle = int(probe_start + (probe_end-probe_start)/2)
        nearest_frag_start = find_nearest(
            array=sub_df_fragments['start_pos'], key=oligo_middle, mode='lower'
        )
        frag_id = sub_df_fragments.index[sub_df_fragments['start_pos'] == nearest_frag_start].tolist()[0]
        frag_start = sub_df_fragments.loc[frag_id, 'start_pos']
        frag_end = sub_df_fragments.loc[frag_id, 'end_pos']
        df_probes_in_frag[probe] = [probe_type, probe_start, probe_end, chrom, frag_id, frag_start, frag_end]

    df_probes_in_frag = df_probes_in_frag.T
    df_probes_in_frag.to_csv(output_path, sep='\t', index_label='probe')


def main(argv=None):
    """
    Main function to run the associate_probes_to_fragments script.

    Parses command line arguments and calls the associate_probes_to_fragments function.

    Parameters
    ----------
    argv : list of str, optional
        List of command line arguments, by default None.

    Returns
    -------
    None
    """
    if argv is None:
        argv = sys.argv[1:]
    if not argv:
        print('Please enter arguments correctly')
        exit(0)

    parser = argparse.ArgumentParser(description='Link the probes name and type with its located read (fragment)')
    parser.add_argument('-o', '--oligos', type=str, required=True,
                        help='Path to the oligos_input.csv file')
    parser.add_argument('-f', '--fragments', type=str, required=True,
                        help='Path to the fragments_input.txt file (generated by hicstuff)')

    args = parser.parse_args(argv)

    associate_probes_to_fragments(
        fragments_list_path=args.fragments,
        oligos_capture_path=args.oligos
    )


if __name__ == "__main__":
    main(sys.argv[1:])
